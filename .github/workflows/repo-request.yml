name: Create New Repo

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      json:
        description: "JSON"
        required: true
        default: '{"visibility":{"title":"Visibility","content":["public"],"text":"public"},"name":{"title":"Name","content":["My-test-repo"],"text":"My-test-repo"},"company":{"title":"Company","content":["Xpirit (1337)"],"text":"Xpirit (1337)"},"team":{"title":"Team","content":["T1-Team 1"],"text":"T1-Team 1"},"project":{"title":"Project","content":["project 1"],"text":"project 1"},"language":{"title":"Language","content":["terraform"],"text":"terraform"}}'
        type: string
      delete-repo:
        description: "Delete repository at the end of the workflow run"
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  issues: write

env:
  DEFAULT_BRANCH: main

jobs:
  provide-json:
    name: "Provide JSON Data"
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.create-output.outputs.json }}
      status: ${{ steps.status.outputs.status }}
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Cache Template Files
        id: cache-template-files
        uses: actions/cache@v3
        with:
          path: ./templates
          key: templates-${{ github.run_id }}
      - name: Parse Issue Form into JSON
        if: ${{ github.event.label && github.event.label.name == 'repo-request' }}
        id: parse
        uses: zentered/issue-forms-body-parser@v2.0.0
      - name: Create Output
        id: create-output
        run: |
          if [[ ! -z '${{ steps.parse.outputs.data }}' ]]
          then
            echo 'json=${{ steps.parse.outputs.data }}' >> "$GITHUB_OUTPUT"
          else
            echo 'json=${{ github.event.inputs.json }}' >> "$GITHUB_OUTPUT"
          fi
      - name: Output status
        id: status
        if: ${{ always() }}
        run: |
          echo 'status=${{ job.status }}' >> "$GITHUB_OUTPUT"

  create-repo:
    name: "Create Repo"
    needs: provide-json
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.generate-repo-name.outputs.repo_name }}
      repo_url: ${{ steps.create-repo.outputs.repo_url }}
      status: ${{ steps.status.outputs.status }}
    steps:
      - name: Get Repo Name
        id: generate-repo-name
        env:
          JSON: ${{ needs.provide-json.outputs.json }}
        run: |
          COMPANY=$(echo $JSON | jq -r '.company.text'  | sed 's/ (.*)//g' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')    
          TEAM=$(echo $JSON | jq -r '.team.text' | sed 's/-.*//g' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
          PROJECT=$(echo $JSON | jq -r '.project.text' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
          RNAME=$(echo $JSON | jq -r '.name.text' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
          echo "project_name"="${RNAME}" >> "$GITHUB_OUTPUT"
          echo "repo_name=${COMPANY}-${TEAM}-${PROJECT}-${RNAME}" >> "$GITHUB_OUTPUT"
      - name: Validate Repo Name
        env:
          REPO_NAME: ${{ steps.generate-repo-name.outputs.repo_name }}
        run: |
          # shall not be empty
          if [ -z $REPO_NAME ]; then exit 1; fi
          # shall be alphanumeric and minus only
          if [[ "$REPO" =~ [^\-a-zA-Z0-9] ]]; then exit 1; fi
          # shall not start with minus
          if [[ "$REPO" == -* ]]; then exit 1; fi
          # shall not end with minus
          if [[ "$REPO" == *- ]]; then exit 1; fi
      - name: Get Attrbutes
        id: get-attributes
        env:
          JSON: ${{ needs.provide-json.outputs.json }}
        run: |
          echo "visibility=$(echo $JSON | jq -r '.visibility.text')" >> "$GITHUB_OUTPUT"
          echo "language=$(echo $JSON | jq -r '.language.text')" >> "$GITHUB_OUTPUT"
      - name: Restore Cached Template Files
        id: restore-cached-template-files
        uses: actions/cache@v3
        with:
          path: ./templates
          key: templates-${{ github.run_id }}
      - name: Get Token
        id: get-workflow-token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ vars.GH_APP_ID }}
          application_private_key: ${{ secrets.GH_APP_KEY }}
          organization: ${{ vars.ORGANIZATION }}
      - name: Create Repo
        id: create-repo
        env:
          GH_TOKEN: ${{ steps.get-workflow-token.outputs.token }}
          REPO_NAME: ${{ steps.generate-repo-name.outputs.repo_name }}
          REPO_OWNER: ${{ vars.ORGANIZATION }}
          VISIBILITY: ${{ steps.get-attributes.outputs.visibility }}
        run: |
          REPO_URL=$(gh repo create $REPO_OWNER/$REPO_NAME --$VISIBILITY --clone)
          echo "repo_url=$REPO_URL" >> "$GITHUB_OUTPUT"
      - name: Copy Files
        working-directory: ./${{ steps.generate-repo-name.outputs.repo_name }}
        env:
          LANGUAGE: ${{ steps.get-attributes.outputs.language }}
        run: |
          cp -r ../templates/common/* .
          cp -r ../templates/languages/$LANGUAGE/* .
      - name: Templating Using Jinja
        working-directory: ./${{ steps.generate-repo-name.outputs.repo_name }}
        env:
          PROJECT_NAME: ${{ steps.generate-repo-name.outputs.project_name }}
        run: |
          pip install jinja-cli         
          find . -type f -exec sh -c 'jinja -E PROJECT_NAME -o $0 $0' {} \;
      - name: Commit & Push Files
        working-directory: ./${{ steps.generate-repo-name.outputs.repo_name }}
        env:
          GH_TOKEN: ${{ steps.get-workflow-token.outputs.token }}
          LANGUAGE: ${{ steps.get-attributes.outputs.language }}
          CI_COMMIT_MESSAGE: "chore(org): Initial commit"
        run: |
          gh auth setup-git
          git config user.name '${{ vars.CI_COMMIT_USER }}'
          git config user.email '${{ vars.CI_COMMIT_USER_MAIL }}'
          git checkout -b $DEFAULT_BRANCH
          git add -A
          git commit -m "$CI_COMMIT_MESSAGE"
          git push --set-upstream origin $DEFAULT_BRANCH
      - name: Delete Repo
        if: ${{ failure() || github.event.inputs.delete-repo == 'true' }}
        env:
          GH_TOKEN: ${{ steps.get-workflow-token.outputs.token }}
          REPO_NAME: ${{ steps.generate-repo-name.outputs.repo_name }}
          REPO_OWNER: ${{ vars.ORGANIZATION }}
        run: |
          gh repo delete $REPO_OWNER/$REPO_NAME --yes
      - name: Output Status
        id: status
        if: ${{ always() }}
        run: |
          echo 'status=${{ job.status }}' >> "$GITHUB_OUTPUT"

  comment-issue:
    name: "Handle issue"
    if: ${{ github.event.label && github.event.label.name == 'repo-request' }}
    needs:
      - provide-json
      - create-repo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Create Comment and Close Issue on Success
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ ${{ needs.provide-json.outputs.status }} != 'success' ] || \
             [ ${{ needs.create-repo.outputs.status }} != 'success' ]
          then
            echo "the repository provisioning failed..." >> status.tmp
            echo "Input-Parsing: ${{ needs.provide-json.outputs.status }}" >> status.tmp
            echo "Repo-Creation: ${{ needs.create-repo.outputs.status }}" >> status.tmp
            echo "Check the [workflow]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID) for details." >> status.tmp
            gh issue comment ${{ github.event.issue.number }} -b "@${{ github.event.issue.user.login }} $(cat status.tmp)"
          else
            gh issue close ${{ github.event.issue.number }} -r Completed -c "@${{ github.event.issue.user.login }} your repository was created and is now accessible here: ${{ needs.create-repo.outputs.repo_url }}"
          fi
